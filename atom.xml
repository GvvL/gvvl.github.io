<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>m&#39;s snippets</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gvvl.github.io/"/>
  <updated>2017-03-24T05:57:27.000Z</updated>
  <id>http://gvvl.github.io/</id>
  
  <author>
    <name>gvvl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IdeaVim指令</title>
    <link href="http://gvvl.github.io/2017/03/24/IdeaVim%E6%8C%87%E4%BB%A4/"/>
    <id>http://gvvl.github.io/2017/03/24/IdeaVim指令/</id>
    <published>2017-03-24T05:53:41.000Z</published>
    <updated>2017-03-24T05:57:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-切换Vim模拟器状态"><a href="#1-切换Vim模拟器状态" class="headerlink" title="1.切换Vim模拟器状态"></a>1.切换Vim模拟器状态</h2><p>这个插件允许设置一个快捷键一键开启或关闭，在切换模式时会同时自动切换keymap，十分方便。默认键位是Ctrl+Alt+V，但这个键位覆盖了很常用的“抽取局部变量”功能，建议重设，在setting-&gt;keymap中查找VIM Emulator即可。</p>
<p>由于开启和关闭状态分别使用两套keymap，因此两套都需要设定。可以把两套keymap下的都设为一样的键，也就是用同一个键切换。但个人建议设为不同的键，这样能清楚知道当前处于那种模式中。并且，如果在开启Vim的插入模式下关闭Vim模拟器，下次进入时仍然是插入模式，比较混乱（因为你关闭模拟器就是为了使用默认keymap输入大段代码，重新开启Vim模拟器就是为了使用普通模式下的命令）。因此建议把Vim keymap中的Exit Insert Mode设为与另一个keymap的Vim Emulator相同的键（也就是进入Vim模拟器的快捷键）。例如，我使用的设定是：</p>
<p>Default keymap -&gt; Vim Emulator :Ctrl+;(用Ctrl+分号开启Vim模拟器）</p>
<p>Vim keymap -&gt; Vim Emulator : Ctrl+,(用Ctrl+逗号关闭Vim模拟器）</p>
<p>Vim keymap -&gt; Vim Emulator : Ctrl+;(用Ctrl+分号退出插入模式，进入普通模式）</p>
<p>这样，在任何时候只要连按两下ctrl+分号，就能保证必定在Vim模拟器的普通模式中。</p>
<h2 id="2-ScrollOff参数"><a href="#2-ScrollOff参数" class="headerlink" title="2. ScrollOff参数"></a>2. ScrollOff参数</h2><p>启动Intellij后在Vim模拟器下输入命令:set so=5可以令屏幕滚动时在光标上下方保留5行预览代码（也就是光标会在第5行触发向上滚动，或者在倒数第5行触发向下滚动）。在代码窗口比较狭小时（例如单步跟踪调试时）非常方便。可惜仅在Vim模拟器开启时有效。</p>
<h2 id="3-行号定位"><a href="#3-行号定位" class="headerlink" title="3.行号定位"></a>3.行号定位</h2><p>普通模式下输入行号G或:行号&lt;回车&gt;都能快速定位到某一行。区别在于前者在输入行号时屏幕上没有任何提示，后者则在Vim命令输入框中可以看到输入过程。（题外话：Sublime Text 2也是用:行号来快速定位到某行，应该是沿用了Vim的习惯）</p>
<h2 id="4-进入修改"><a href="#4-进入修改" class="headerlink" title="4.进入修改"></a>4.进入修改</h2><p>进入插入模式的方式有很多，直接选用合适的方式进入插入模式比进入后再用箭头键移动光标要好。常用的有：</p>
<p>o -在当前行下方插入新行并自动缩进</p>
<p>O -在当前行上方插入新行并自动缩进（普通模式下的大写字母命令用shift+字母键输入，下同）</p>
<p>i -在当前字符左方开始插入字符</p>
<p>a -在当前字符右方开始插入字符</p>
<p>I -光标移动到行首并进入插入模式</p>
<p>A -光标移动到行尾并进入插入模式</p>
<p>s -删除光标所在字符并进入插入模式</p>
<p>S -删除光标所在行并进入插入模式</p>
<p>c&lt;范围&gt; -删除光标所在位置周围某个范围的文本并进入插入模式。关于范围请看第5点，常用的组合有：caw -删除一个单词包括它后面的空格并开始插入；ciw -删除一个单词并开始插入；ci” -删除一个字符串内部文本并开始插入；c$ -从光标位置删除到行尾并开始插入；ct字符-从光标位置删除本行某个字符之前（保留该字符）并开始插入。等等。</p>
<p>C -删除光标位置到行尾的内容并进入插入模式(相当于c$)</p>
<p>r -修改光标所在字符，然后返回普通模式</p>
<p>R -进入覆盖模式</p>
<h2 id="5-范围操作"><a href="#5-范围操作" class="headerlink" title="5.范围操作"></a>5.范围操作</h2><p>某些普通模式的动作命令后面可以追加一些表示范围的指令，表示该动作将作用在整个范围上。这类命令常用的有：</p>
<p>d&lt;范围&gt; -删除一定范围内的文本</p>
<p>c&lt;范围&gt; -删除一定范围内的文本并进入插入模式</p>
<p>y&lt;范围&gt; -将范围内的文本放入0号和”号注册栏</p>
<p>v&lt;范围&gt; -选择范围内的文本</p>
<p>=&lt;范围&gt; -自动缩进范围内的文本</p>
<p>gU&lt;范围&gt; -将范围内的字符转换为大写</p>
<p>gu&lt;范围&gt; -将范围内的字符转换为小写</p>
<blockquote>
<p>&lt;范围&gt; -将范围中的内容缩进一格</p>
</blockquote>
<p>&lt;&lt;范围&gt; -将范围中的内容取消缩进一格</p>
<p>常用的范围指令有：</p>
<p>空格-光标所在位置字符。（例如gU空格-将光标位置字符转为大写）</p>
<p>重复某些动作命令-光标所在行。（例如dd删除一行，yy复制一行，cc删除一行文本并开始插入，&gt;&gt;当前行缩进一格，==自动缩进当前行）</p>
<p>$ -从光标位置到行尾</p>
<p>^ -从光标位置到行首，不包含缩进空白</p>
<p>0 -从光标位置到行首，包含缩进空白</p>
<p>gg -从光标位置到文件开头</p>
<p>G -从光标位置到文件结尾</p>
<p>% -从光标位置到另一边匹配的括号</p>
<p>f&lt;字符&gt; -从光标位置到光标右边某个字符首次出现的位置，包括该字符</p>
<p>F&lt;字符&gt; -从光标位置到光标左边某个字符首次出现的位置，包括该字符</p>
<p>t&lt;字符&gt; -从光标位置到光标右边某个字符首次出现的位置，包括该字符</p>
<p>F&lt;字符&gt; -从光标位置到光标左边某个字符首次出现的位置，包括该字符</p>
<p>/正则表达式-从光标位置到下一个匹配正则表达式的位置（跨行）</p>
<p>?正则表达式-从光标位置到上一个匹配正则表达式的位置（跨行）</p>
<p>aw -一个单词加一个空格（a可理解为“一个”，下同）</p>
<p>iw -一个单词（i可理解为in，下同）</p>
<p>a” -一个字符串包括双引号</p>
<p>i” -一个字符串内部文本</p>
<p>a&lt; -一组&lt; &gt;包含的文本，包括&lt;</p>
<blockquote>
<p>号本身</p>
</blockquote>
<p>同理类推：i&lt;, a[, i[, a(, i(</p>
<p>注意：真正vim中的it范围（一对xml标签内部）在ideaVim中不生效。</p>
<p>用/或?命令查找时，正则表达式默认大小写敏感，如果需要不敏感，可以在正则表达式开始处加上\c标志。例如/\cabc可以匹配到ABC。下面提到的:s命令同样适用。</p>
<h2 id="6-选择文本"><a href="#6-选择文本" class="headerlink" title="6.选择文本"></a>6.选择文本</h2><p>在Vim中，选择文本需要进入“可视模式”（Visual Mode），这个名称比较奇怪，它的来由据说是因为在Vim的前身Vi中，选择区域是不可见的。在Vim中选择区域会高亮显示，因此称为“可视模式”。</p>
<p>v -进入字符选择模式，V -进入行选择模式，Ctrl+v -进入块选择模式。</p>
<p>进入相应模式后移动光标即可选中文本。过程中可按o键令光标在选区两端切换。</p>
<p>在块选择模式中选中多行，然后按I或A后输入文本，再退出插入模式，所输入的文本将自动加入到每一行的开头或结尾。</p>
<h2 id="7-复制粘贴"><a href="#7-复制粘贴" class="headerlink" title="7.复制粘贴"></a>7.复制粘贴</h2><p>在Vim模式下，复制粘贴并不直接使用系统的剪贴板，而是使用Vim提供的多个“寄存器”，每个寄存器都以一个字符来表示。关于寄存器的详细说明可以看这里<a href="http://blah.blogsome.com/2006/04/27/vim_tut_register/（随便google的一个网页），这里简单列一些常用的操作技巧（注意，vim使用双引号&quot;来作为选择寄存器的命令，因此下文中的双引号均指在普通模式下按双引号键）：" target="_blank" rel="external">http://blah.blogsome.com/2006/04/27/vim_tut_register/（随便google的一个网页），这里简单列一些常用的操作技巧（注意，vim使用双引号&quot;来作为选择寄存器的命令，因此下文中的双引号均指在普通模式下按双引号键）：</a></p>
<p>a）用y命令将文本存入寄存器后，如果想在别处替换原有内容，可以先用v命令选中原有内容，然后用p命令粘贴。但第一次粘贴后，默认的寄存器”将被替换为刚刚删除的内容。如果要再次粘贴之前复制的内容，需要使用”0p命令组合来复制。也可以进入插入模式后用Ctrl+r 0来复制，例如ciw0命令组合将用粘贴内容替换光标处的一个单词，并停留在插入模式。</p>
<p>b）在Windows下，寄存器+和<em>都代表系统剪贴板，可以互换使用，选一个顺手的即可。例如”+yy命令组合可将当前行复制到系统剪贴板。ci”</em>命令组合则将系统剪贴板的内容替换字符串的内部文本。</p>
<p>c)寄存器1至9记录之前九次的删除大段文本，每次超过一行的删除操作都会导致这9个寄存器的内容发生位移，最近删除的文本会存入寄存器1。但只有删除超过1行时才会影响寄存器1至9，行内的删除内容则会被存入寄存器-（减号）。如果用q命令录制宏时不涉及跨行删除，可以在宏中直接使用这9个寄存器来暂存文本。（在Vim中，复制内容与录制宏共享同一套寄存器，因此我习惯把字母寄存器留给宏使用）</p>
<p>d)普通模式下小写p把寄存器内容复制到当前位置之后，大写P把寄存器内容复制到当前位置之前。</p>
<p>e)使用:regs命令可以列出当前所有寄存器的内容</p>
<p>8.一些插入模式下的常用快捷键</p>
<p>Ctrl+h -删除光标左边字符</p>
<p>Ctrl+w -删除光标左边的单词</p>
<p>Ctrl+y -复制上方的一个字符</p>
<p>Ctrl+e -复制下方的一个字符</p>
<p>Ctrl+r 0 -插入前一次用y命令寄存的内容</p>
<p>Ctrl+r * -插入系统剪贴板的内容</p>
<p>Ctrl+r &lt;寄存器名称&gt; -插入指定寄存器的内容</p>
<p>Ctrl+a -插入前一次插入模式所键入的内容</p>
<p>Ctrl+o -执行一个普通模式下的命令然后返回插入模式。例如Ctrl+o A相当于按End键，Ctrl+o I相当于按Home键</p>
<h2 id="9-退出插入模式"><a href="#9-退出插入模式" class="headerlink" title="9.退出插入模式"></a>9.退出插入模式</h2><p>退出插入模式可以用ESC键，但键位太远。其实也可以用Ctrl+[键退出插入模式。当然也可以用第1点自定义的Ctrl+;快捷键，但这不是标准vim按键，会养成不良习惯，不建议使用。</p>
<h2 id="10-重复操作"><a href="#10-重复操作" class="headerlink" title="10.重复操作"></a>10.重复操作</h2><p>普通模式下按.（小数点）可重复上一次的修改操作</p>
<p>&amp; -重复上一次的:s替换命令</p>
<p>@@ -重复上一次执行的宏</p>
<h1 id="11-跳转"><a href="#11-跳转" class="headerlink" title="11.跳转"></a>11.跳转</h1><p>Ctrl+]跳转到当前标识符的定义位置（相当于在当前光标位置的单词上按住ctrl用鼠标点击）</p>
<p>Ctrl+o回退一步(go back)</p>
<p>Ctrl+i前进一步(go forward)</p>
<p>`.跳转到之前修改位置</p>
<p>``在前一次跳转位置与当前位置间切换</p>
<p>行号G或:行号&lt;回车&gt;跳转到某一行</p>
<p>gg跳转到文件开头</p>
<p>G跳转到文件末尾</p>
<p>H跳转到屏幕顶端（如果设置了set</p>
<p>so=n，则跳转到第n行）</p>
<p>L跳转到屏幕底端（如果设置了set</p>
<p>so=n，则跳转到倒数第n行）</p>
<p>M跳转到屏幕中间</p>
<p>f或F跳转到本行某个字符，小写f向右查找，大写F向左查找。用;或,在匹配间切换</p>
<p>t或T跳转到本行某个字符之前，小写t向右查找，大写T向左查找。用;或,在匹配间切换</p>
<p>/正则表达式跳转到下一个匹配。用n或N在匹配间切换。</p>
<p>?正则表达式跳转到上一个匹配。用n或N在匹配间切换。</p>
<p>（结合前面第5点，你也许注意到了，在指定范围时，使用跳转命令将指定一个从光标位置到跳转目标的区域）</p>
<p>这里补充一部分文章《vim的跳转与回跳》的内容：</p>
<p>vim的跳转</p>
<ol>
<li>标签跳转,</li>
</ol>
<p>1.1 跳到标签xxx处</p>
<p>1) 移动光标到xxx处, 按 CTRL+]</p>
<p>2) :tag xxx</p>
<p>1.2. 标签跳转的回跳.</p>
<p>CTRL+T, 可以多次回跳</p>
<ol>
<li>普通跳转</li>
</ol>
<p>2.1 跳转: 各种可以导致移动到当前行以外的操作.</p>
<p>2.2 普通跳转的回跳</p>
<p>2.2.1 <code>可以回跳到上一个位置. 多次按</code>会在两个位置间跳转.</p>
<p>2.2.2 CTRL+o, 向后跳.  CTRL+i 向前跳.</p>
<p>2.2.3 内部标记</p>
<p>‘  或 `  上一次的位置</p>
<p>“ 上次编辑该文件时的位置.</p>
<p>[ 最后一次修改的起始位置(似乎不管用)</p>
<p>] 最后一次修改的结束为止(似乎不管用).</p>
<p>2.2.4 marks</p>
<p>2.2.4.1 :marks  现实当前可用marks</p>
<p>2.2.4.2 在任意位置, 按mt, (t可以为任意字母), 就做好了一个名字为t的mark,</p>
<p>可用:marks查看, 也可用`t跳到此位置(t为上述的任意字符).</p>
<h2 id="12书签"><a href="#12书签" class="headerlink" title="12书签"></a>12书签</h2><p>在普通模式下按m&lt;小写字母&gt;即可定义书签，按`&lt;字母&gt;则可跳转到某个书签的精确位置，按’&lt;字母&gt;可跳转到某个书签所在行的行首（用来录制宏时比较有用）。最常用的自然是mm, mn, mj, mk, ml这几个顺手的键位。</p>
<p>真正的vim中的全局书签m&lt;大写字母&gt;在目前IdeaVim版本中不生效。需要定义全局书签可以使用Idea原本的F11 +数字方式</p>
<h2 id="13文本替换"><a href="#13文本替换" class="headerlink" title="13文本替换"></a>13文本替换</h2><p>使用:s/正则表达式/替换文本/可在本行内替换首次出现的匹配</p>
<p>使用:s/正则表达式/替换文本/g在本行内替换所有出现的匹配</p>
<p>使用:%s/正则表达式/替换文本/g在当前文件内替换所有出现的匹配</p>
<p>在可视模式下选中文本后，使用:’&lt;,’&gt;s/正则表达式/替换文本/g命令可在选中区域中替换文本。其中’&lt;,’&gt;部分在可视模式下，按:冒号后自动加入，直接输入s命令即可。但有效区域只能以行为单位。真正Vim中的\%V标志在IdeaVim中不生效。</p>
<p>11代码折叠</p>
<p>zo -打开折叠</p>
<p>zc -关闭折叠</p>
<h2 id="14宏定义"><a href="#14宏定义" class="headerlink" title="14宏定义"></a>14宏定义</h2><p>在IdeaVim中定义宏比Idea自带的宏功能要轻量许多。按在普通模式下q&lt;寄存器名称&gt;即可开始把后续按键序列录制到指定寄存器中（寄存器参考前面第7条）。录制完毕进入普通模式再按q键即可停止录制。之后用@&lt;寄存器名称&gt;即可重放。需要注意的是宏和复制粘贴共用一套寄存器，因此在录制宏时就注意不要把当前宏正在使用的寄存器用来复制了。寄存器内容是自动保存的，重启Idea仍然生效。但IdeaVim没有导出宏独立保存的功能。因此最好把用来保存宏的寄存器和用来复制粘贴的寄存器分开，不要同一个寄存器有时用来记录宏，有时用来复制粘贴。我的习惯是键盘左手区用来保存一些长期使用的宏（比如说我有一个宏专门用来把pom.xml中的版本号抽取到property区域，原来的位置则改用${property}引用）。右手区的hjklnm键用来保存一些临时宏。yuiop五个寄存器保留用来复制粘贴。如果录制的宏不涉及删除大段代码，寄存器1至9也可以用来进行复制粘贴。</p>
<p>执行一次宏后，可以用@@命令重复上一次执行的宏。</p>
<p>在Idea中录制宏时，如果触发了代码自动完成，在自动完成列表启动的状态输入的字符不会被记录。因此最好在Setting -&gt; Code Completion -&gt; Autopopup code completion中把延迟设为500ms以上或干脆关掉。在录制宏的过程中避免触发代码自动完成功能。</p>
<p>录制一些长期有效的宏时，开始录制后，最好先用0，^，T, F, $等命令把光标对齐到行首行末或某个特定起始位置（比如说用F”跳转到字符串的左边引号），再用一个f或/指令跳转到操作位置，这样的宏就不用必须把光标放在某个特定字符才能使用了。</p>
<h2 id="15-一些常用组合技"><a href="#15-一些常用组合技" class="headerlink" title="15.一些常用组合技"></a>15.一些常用组合技</h2><p>全选：ggvG</p>
<p>调换两个字符位置：xp</p>
<p>复制一行：yyp</p>
<p>调换两行位置：ddp</p>
<p>插入模式下到行尾继续输入（相当于End键）：Ctrl+o A或Ctrl+[ A</p>
<p>插入模式下到行首继续输入（相当于Home键）：Ctrl+o I或Ctrl+[ I</p>
<p>到类定义位置（适用于正确缩进的public，protected类）：?^p回车</p>
<h2 id="16-一些在目前版本已知没有实现的一些常用Vim功能"><a href="#16-一些在目前版本已知没有实现的一些常用Vim功能" class="headerlink" title="16.一些在目前版本已知没有实现的一些常用Vim功能"></a>16.一些在目前版本已知没有实现的一些常用Vim功能</h2><p>（如果对Vim不熟悉可以跳过这节）</p>
<p>a）let命令（没有let命令就无法导出/导入寄存器内容，也就是无法导入宏）</p>
<p>b）:g命令（在文本处理中很有用的一个命令，在编程中倒是不那么常用）</p>
<p>c）!命令（执行shell命令）</p>
<p>d）大部分正则表达式标记（例如\%V，\v等等）</p>
<p>e)某些多键命令双击最后一个字符表示作用于当前行。例如在Vim中gUU可以把当前行转换为大写，在IdeaVim中无效，实现同样功能可以先用V命令选中当前行，再用gU转换为大写。</p>
<p>f）关于窗口操作的大部分命令（Ctrl+w系列命令, :split等）</p>
<p>g）所有Vim脚本插件（不过大部分可以用Idea自身的功能和插件来补偿）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-切换Vim模拟器状态&quot;&gt;&lt;a href=&quot;#1-切换Vim模拟器状态&quot; class=&quot;headerlink&quot; title=&quot;1.切换Vim模拟器状态&quot;&gt;&lt;/a&gt;1.切换Vim模拟器状态&lt;/h2&gt;&lt;p&gt;这个插件允许设置一个快捷键一键开启或关闭，在切换模式时会同时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://gvvl.github.io/2017/03/23/hello-world/"/>
    <id>http://gvvl.github.io/2017/03/23/hello-world/</id>
    <published>2017-03-23T03:54:21.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vscode 配置记录</title>
    <link href="http://gvvl.github.io/2016/07/17/vscode-%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://gvvl.github.io/2016/07/17/vscode-配置记录/</id>
    <published>2016-07-17T07:00:16.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// 将键绑定放入此文件中以覆盖默认值</div><div class="line">[</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"shift+u"</span>,                <span class="string">"command"</span>: <span class="string">"cursorPageUp"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"shift+i"</span>,              <span class="string">"command"</span>: <span class="string">"cursorPageDown"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+l"</span>,            <span class="string">"command"</span>: <span class="string">"cursorWordEndRight"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+h"</span>,            <span class="string">"command"</span>: <span class="string">"cursorWordEndLeft"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+k"</span>,                 <span class="string">"command"</span>: <span class="string">"cursorRight"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+j"</span>,                  <span class="string">"command"</span>: <span class="string">"cursorLeft"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"end"</span>,                   <span class="string">"command"</span>: <span class="string">"cursorEnd"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+u"</span>,                    <span class="string">"command"</span>: <span class="string">"cursorUp"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+i"</span>,                  <span class="string">"command"</span>: <span class="string">"cursorDown"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">   &#123; <span class="string">"key"</span>: <span class="string">"ctrl+d"</span>,          <span class="string">"command"</span>: <span class="string">"editor.action.deleteLines"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+d"</span>,                <span class="string">"command"</span>: <span class="string">"editor.action.addSelectionToNextFindMatch"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+n"</span>,            <span class="string">"command"</span>: <span class="string">"editor.action.triggerSuggest"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+o"</span>,             <span class="string">"command"</span>: <span class="string">"scrollLineDown"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+y"</span>,               <span class="string">"command"</span>: <span class="string">"scrollLineUp"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</div><div class="line">    &#123; <span class="string">"key"</span>: <span class="string">"alt+;"</span>,               <span class="string">"command"</span>: <span class="string">"deleteWordEndRight"</span>,</div><div class="line">                                     <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
      <category term="vscode" scheme="http://gvvl.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://gvvl.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>xadmin 简单配置记录</title>
    <link href="http://gvvl.github.io/2016/07/17/xadmin-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://gvvl.github.io/2016/07/17/xadmin-简单配置记录/</id>
    <published>2016-07-17T06:59:02.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公共配置"><a href="#公共配置" class="headerlink" title="公共配置"></a>公共配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">class BaseSetting(object):</div><div class="line">    <span class="comment">#开启主题选择</span></div><div class="line">    enable_themes = True</div><div class="line">    use_bootswatch = True</div><div class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</div><div class="line"></div><div class="line">class GlobalSetting(object):</div><div class="line">    <span class="comment">#全局检索model</span></div><div class="line">    global_search_models = [Boy, ]</div><div class="line">    <span class="comment">#model对应icon</span></div><div class="line">    global_models_icon = &#123;</div><div class="line">        Boy: <span class="string">'fa fa-laptop'</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="comment">#菜单导航栏样式 accordion 和 default</span></div><div class="line">    menu_style = <span class="string">'accordion'</span><span class="comment">#'accordion'</span></div><div class="line">    site_title=u<span class="string">'站点标题'</span></div><div class="line">    site_footer=u<span class="string">'公司'</span></div><div class="line">    <span class="comment">#菜单导航配置实例</span></div><div class="line">    def get_site_menu(self):</div><div class="line">        <span class="built_in">return</span> (</div><div class="line">            &#123;<span class="string">'title'</span>: <span class="string">'内容管理'</span>, <span class="string">'perm'</span>: self.get_model_perm( Boy, <span class="string">'change'</span>), <span class="string">'menus'</span>:(</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'游戏资料'</span>, <span class="string">'icon'</span>: <span class="string">'info-sign'</span>, <span class="string">'url'</span>: self.get_model_url(Boy, <span class="string">'changelist'</span>)&#125;,</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'组'</span>, <span class="string">'icon'</span>: <span class="string">'info-sign'</span>, <span class="string">'url'</span>: self.get_model_url(Group, <span class="string">'changelist'</span>)&#125;,</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'全县'</span>, <span class="string">'icon'</span>: <span class="string">'info-sign'</span>, <span class="string">'url'</span>: self.get_model_url(Permission, <span class="string">'changelist'</span>)&#125;,</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'用户'</span>, <span class="string">'icon'</span>: <span class="string">'info-sign'</span>, <span class="string">'url'</span>: self.get_model_url(User, <span class="string">'changelist'</span>)&#125;,</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'网站文章'</span>, <span class="string">'icon'</span>: <span class="string">'file'</span>, <span class="string">'url'</span>: self.get_model_url(Boy, <span class="string">'changelist'</span>) + <span class="string">'?_rel_categories__id__exact=1'</span>&#125;,</div><div class="line">            )&#125;,</div><div class="line">            &#123;<span class="string">'title'</span>: <span class="string">'分类管理'</span>, <span class="string">'perm'</span>: self.get_model_perm(Boy, <span class="string">'change'</span>), <span class="string">'menus'</span>:(</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'主要分类'</span>, <span class="string">'url'</span>: self.get_model_url(Boy, <span class="string">'changelist'</span>) + <span class="string">'?_p_parent__isnull=True'</span>&#125;,</div><div class="line">                &#123;<span class="string">'title'</span>: <span class="string">'游戏资料'</span>, <span class="string">'url'</span>: self.get_model_url(Boy, <span class="string">'changelist'</span>) + <span class="string">'?_rel_parent__id__exact=2'</span>&#125;,</div><div class="line">            )&#125;,</div><div class="line"></div><div class="line">        )</div><div class="line">xadmin.site.register(views.CommAdminView, GlobalSetting)</div></pre></td></tr></table></figure>
<h2 id="model配置"><a href="#model配置" class="headerlink" title="model配置"></a>model配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">class DemoModelAdmin(object):</div><div class="line">    <span class="comment">#展示字段diy</span></div><div class="line">    def open_web(self, instance):</div><div class="line">        <span class="built_in">return</span> <span class="string">"&lt;a href='http://%s' target='_blank'&gt;Open&lt;/a&gt;"</span> % instance.name</div><div class="line">    open_web.short_description = <span class="string">"Acts"</span></div><div class="line">    open_web.allow_tags = True</div><div class="line">    open_web.is_column = True</div><div class="line">    app_label=u<span class="string">'当前model名称'</span></div><div class="line">    <span class="comment">#列表页展示内容</span></div><div class="line">    list_display=(<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'like'</span>,<span class="string">'home'</span>,<span class="string">'birthday'</span>,<span class="string">'is_new'</span>,<span class="string">'open_web'</span>,<span class="string">'y'</span>)</div><div class="line">    <span class="comment">#列表页链接字段</span></div><div class="line">    list_display_links = (<span class="string">'age'</span>,)</div><div class="line">    <span class="comment">#列表页顶部过滤器</span></div><div class="line">    list_filter=(<span class="string">'age'</span>,<span class="string">'birthday'</span>,<span class="string">'is_new'</span>,(<span class="string">'like'</span>,xadmin.filters.MultiSelectFieldListFilter))</div><div class="line">    <span class="comment">#列表页顶部搜索</span></div><div class="line">    search_fields=(<span class="string">'name'</span>,<span class="string">'age'</span>)</div><div class="line">    list_quick_filter = [<span class="string">'like'</span>, &#123;<span class="string">'field'</span>: <span class="string">'name'</span>, <span class="string">'limit'</span>: 10&#125;]</div><div class="line">    <span class="comment">#列表页细节展示</span></div><div class="line">    show_detail_fields=(<span class="string">'name'</span>,)</div><div class="line">    <span class="comment">#列表页单字段编辑</span></div><div class="line">    list_editable=(<span class="string">'birthday'</span>,<span class="string">'is_new'</span>,<span class="string">'y'</span>)</div><div class="line">    batch_fields=(<span class="string">'contact'</span>,<span class="string">'age'</span>)</div><div class="line">    relfield_style = <span class="string">'fk-ajax'</span></div><div class="line">    <span class="comment">#删除还原</span></div><div class="line">    reversion_enable = True</div><div class="line">    <span class="comment">#add新条目时的分步操作</span></div><div class="line">    wizard_form_list = [</div><div class="line">        (<span class="string">'First\'</span>s Form<span class="string">', ('</span>name<span class="string">', )),</span></div><div class="line">        ('Second Form<span class="string">', ('</span>birthday<span class="string">',)),</span></div><div class="line">        ('Thread Form<span class="string">', ('</span>age<span class="string">',))</span></div><div class="line">    ]</div><div class="line">    #自动刷新设置</div><div class="line">    refresh_times = (3, 5, 10)</div><div class="line">    actions = None</div><div class="line">    #列表页底部统计</div><div class="line">    aggregate_fields = &#123;"age": "sum"&#125;</div><div class="line">    #列表页可选布局</div><div class="line">    grid_layouts = ('table<span class="string">', '</span>thumbnails<span class="string">')</span></div><div class="line">    #书签</div><div class="line">    list_bookmarks = [&#123;'title<span class="string">': "Need Guarantee", '</span>query<span class="string">': &#123;'</span>age__exact<span class="string">': 16&#125;, '</span>order<span class="string">': ('</span>-age<span class="string">',),</span></div><div class="line">                       'cols<span class="string">': ('</span>name<span class="string">', '</span>birthday<span class="string">',)&#125;]</span></div><div class="line">    #详情页布局                       </div><div class="line">    form_layout = (</div><div class="line">        Main(</div><div class="line">            TabHolder(</div><div class="line">                Tab('Comm Fields<span class="string">',</span></div><div class="line">                    Fieldset('Company data<span class="string">',</span></div><div class="line">                             'name<span class="string">', '</span>age<span class="string">',</span></div><div class="line">                             description="some comm fields, required"</div><div class="line">                             ),</div><div class="line">                    # Inline(MaintainLog),</div><div class="line">                    ),</div><div class="line">                Tab('Extend Fields<span class="string">',</span></div><div class="line">                    Fieldset('Contact details<span class="string">',</span></div><div class="line">                             'name<span class="string">',</span></div><div class="line">                             Row('name<span class="string">', '</span>like<span class="string">'),</span></div><div class="line">                             Row('name<span class="string">', '</span>birthday<span class="string">'),</span></div><div class="line">                             Row(AppendedText(</div><div class="line">                                 'like<span class="string">', '</span>G<span class="string">'), AppendedText('</span>name<span class="string">', "G")),</span></div><div class="line">                             'birthday<span class="string">'</span></div><div class="line">                             ),</div><div class="line">                    ),</div><div class="line">            ),</div><div class="line">        ),</div><div class="line">        Side(</div><div class="line">            Fieldset('Status data<span class="string">',</span></div><div class="line">                     'age<span class="string">', '</span>like<span class="string">', '</span>birthday<span class="string">'</span></div><div class="line">                     ),</div><div class="line">        )</div><div class="line">    )</div><div class="line">    #图表绘制</div><div class="line">    data_charts = &#123;</div><div class="line">        u"aa1": &#123;'title<span class="string">': u"统计表", "x-field": "age", "y-field": ("y","birthday"),"order":('</span>age<span class="string">',)&#125;,</span></div><div class="line">        u"aa2": &#123;'title<span class="string">': u"统表", "x-field": "age", "y-field": "birthday", "order": ('</span>age<span class="string">',)&#125;,</span></div><div class="line">        "per_month": &#123;'title<span class="string">': u"Monthly Users", "x-field": "_chart_month", "y-field": ("y",),"order":("age",),</span></div><div class="line">                      "option": &#123;</div><div class="line">                          "series": &#123;"bars": &#123;"align": "center", "barWidth": 0.1, 'show<span class="string">': True&#125;&#125;,</span></div><div class="line">                          "xaxis": &#123;"aggregate": "sum", "mode": "categories"&#125;,</div><div class="line">                      &#125;,</div><div class="line">                      &#125;,</div><div class="line">    &#125;</div><div class="line">    def _chart_month(self,obj):</div><div class="line">        return obj.birthday.strftime("%m")</div><div class="line"></div><div class="line"></div><div class="line">xadmin.site.register(Demomodel,DemoModelAdmin)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;公共配置&quot;&gt;&lt;a href=&quot;#公共配置&quot; class=&quot;headerlink&quot; title=&quot;公共配置&quot;&gt;&lt;/a&gt;公共配置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
    
    </summary>
    
      <category term="python" scheme="http://gvvl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://gvvl.github.io/tags/python/"/>
    
      <category term="django" scheme="http://gvvl.github.io/tags/django/"/>
    
      <category term="xadmin" scheme="http://gvvl.github.io/tags/xadmin/"/>
    
  </entry>
  
  <entry>
    <title>android GestureDetector</title>
    <link href="http://gvvl.github.io/2016/06/14/android-GestureDetector/"/>
    <id>http://gvvl.github.io/2016/06/14/android-GestureDetector/</id>
    <published>2016-06-14T06:18:08.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class GestureListenerImpl implements OnGestureListener&#123;</div><div class="line">    	@Override</div><div class="line">    	public boolean onDown(MotionEvent e) &#123;//触碰时调用</div><div class="line">    		return false;</div><div class="line">    	&#125;</div><div class="line">    </div><div class="line">    	@Override</div><div class="line">    	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,</div><div class="line">    			float velocityY) &#123;//扫动时回调</div><div class="line">    		return false;</div><div class="line">    	&#125;</div><div class="line">    </div><div class="line">    	@Override</div><div class="line">    	public void onLongPress(MotionEvent e) &#123;//长按时</div><div class="line">    	&#125;</div><div class="line">    </div><div class="line">    	@Override</div><div class="line">    	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,</div><div class="line">    			float distanceY) &#123;//滑动时，如果为扫动，则滑动完成时调用</div><div class="line">    		return false;</div><div class="line">    	&#125;</div><div class="line">    </div><div class="line">    	@Override</div><div class="line">    	public void onShowPress(MotionEvent e) &#123;//按下未移动</div><div class="line">    	&#125;</div><div class="line">    </div><div class="line">    	@Override</div><div class="line">    	public boolean onSingleTapUp(MotionEvent e) &#123;//单个手指轻点</div><div class="line">    		return false;</div><div class="line">    	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="android" scheme="http://gvvl.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://gvvl.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>pythonIO操作</title>
    <link href="http://gvvl.github.io/2016/06/08/pythonIO%E6%93%8D%E4%BD%9C/"/>
    <id>http://gvvl.github.io/2016/06/08/pythonIO操作/</id>
    <published>2016-06-08T00:48:34.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h2><hr>
<h3 id="新建、打开"><a href="#新建、打开" class="headerlink" title="新建、打开"></a>新建、打开</h3><p>with open(‘tes.txt’,’w’) as f:<br>    pass</p>
<p>第二个参数：a.追加，r.只读。f.close()执行完成文件的操作。</p>
<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>with open(‘tes.txt’,’r’) as f:<br>    content=f.read(size)</p>
<p>size:读取长度。另外有readline()逐行读取，readlines()返回行数组。</p>
<h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>with open(‘tes.txt’,’a’) as f:<br>    f.write(content)</p>
<p>将输出定向到文件：<br>sys.stdout = open(“stdout.txt”, “w”)</p>
<hr>
<h2 id="目录类"><a href="#目录类" class="headerlink" title="目录类"></a>目录类</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">os.rename(name1,name2)<span class="comment">#重命名</span></div><div class="line">os.remove(name1)<span class="comment">#删除</span></div><div class="line">shutil.copyfile()<span class="comment">#拷贝</span></div><div class="line"></div><div class="line"></div><div class="line">p=os.getcwd()<span class="comment">#获取当前路径</span></div><div class="line">p=os.path.abspath(<span class="string">'tes.txt'</span>)<span class="comment">#获取文件的绝对路径</span></div><div class="line">p1=os.path.join(p,<span class="string">'dir'</span>)<span class="comment">#拼接路径</span></div><div class="line">os.mkdir(p1)<span class="comment">#生成路径</span></div><div class="line">os.rmdir(p1)<span class="comment">#删除路径</span></div><div class="line">os.path.dirname(__FILE__)<span class="comment">#上一层目录</span></div><div class="line">os.path.abspath(os.path.join(os.path.pardir,os.path.pardir))<span class="comment">#上上层目录</span></div><div class="line">os.path.split(<span class="string">'/Users/michael/testdir/file.txt'</span>)<span class="comment">#获取文件名</span></div><div class="line">os.path.splitext(<span class="string">'/path/to/file.txt'</span>)<span class="comment">#获取扩展名</span></div><div class="line"></div><div class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.isdir(x)]<span class="comment">#列出当前所有子目录</span></div><div class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.isfile(x) and os.path.splitext(x)[1]==<span class="string">'.png'</span>]<span class="comment">#列出当前所有png格式化图片</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">os.remove()删除文件</div><div class="line">os.rename()重命名文件</div><div class="line">os.walk()生成目录树下的所有文件名</div><div class="line">os.chdir()改变目录</div><div class="line">os.mkdir/makedirs创建目录/多层目录</div><div class="line">os.rmdir/removedirs删除目录/多层目录</div><div class="line">os.listdir()列出指定目录的文件</div><div class="line">os.getcwd()取得当前工作目录</div><div class="line">os.chmod()改变目录权限</div><div class="line">os.path.basename()去掉目录路径，返回文件名</div><div class="line">os.path.dirname()去掉文件名，返回目录路径</div><div class="line">os.path.join()将分离的各部分组合成一个路径名</div><div class="line">os.path.split()返回（dirname(),basename())元组</div><div class="line">os.path.splitext()(返回filename,extension)元组</div><div class="line">os.path.getatime\ctime\mtime分别返回最近访问、创建、修改时间</div><div class="line">os.path.getsize()返回文件大小</div><div class="line">os.path.exists()是否存在</div><div class="line">os.path.isabs()是否为绝对路径</div><div class="line">os.path.isdir()是否为目录</div><div class="line">os.path.isfile()是否为文件</div></pre></td></tr></table></figure>
<h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">sys.argv           命令行参数List，第一个元素是程序本身路径 </div><div class="line">sys.modules.keys() 返回所有已经导入的模块列表 </div><div class="line">sys.exc_info()     获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息 </div><div class="line">sys.exit(n)        退出程序，正常退出时exit(0) </div><div class="line">sys.hexversion     获取Python解释程序的版本值，16进制格式如：0x020403F0 </div><div class="line">sys.version        获取Python解释程序的版本信息 </div><div class="line">sys.maxint         最大的Int值 </div><div class="line">sys.maxunicode     最大的Unicode值 </div><div class="line">sys.modules        返回系统导入的模块字段，key是模块名，value是模块 </div><div class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </div><div class="line">sys.platform       返回操作系统平台名称 </div><div class="line">sys.stdout         标准输出</div><div class="line">sys.stdin          标准输入</div><div class="line">sys.stderr         错误输出</div><div class="line">sys.exc_clear()    用来清除当前线程所出现的当前的或最近的错误信息</div><div class="line">sys.exec_prefix    返回平台独立的python文件安装的位置</div><div class="line">sys.byteorder      本地字节规则的指示器，big-endian平台的值是&apos;big&apos;,little-endian平台的值是&apos;little&apos;</div><div class="line">sys.copyright      记录python版权相关的东西</div><div class="line">sys.api_version    解释器的C的API版本</div><div class="line">sys.version_info</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件类&quot;&gt;&lt;a href=&quot;#文件类&quot; class=&quot;headerlink&quot; title=&quot;文件类&quot;&gt;&lt;/a&gt;文件类&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;新建、打开&quot;&gt;&lt;a href=&quot;#新建、打开&quot; class=&quot;headerlink&quot; title=&quot;新建、打开&quot;
    
    </summary>
    
      <category term="python" scheme="http://gvvl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://gvvl.github.io/tags/python/"/>
    
      <category term="IO" scheme="http://gvvl.github.io/tags/IO/"/>
    
      <category term="文件处理" scheme="http://gvvl.github.io/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>python入门(一)</title>
    <link href="http://gvvl.github.io/2016/06/07/python%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://gvvl.github.io/2016/06/07/python入门（一）/</id>
    <published>2016-06-07T07:44:07.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>python数据类型没有值类型，全部为引用类型。所以变量的类型即是其指向的内存中的对象类型。对象则分为两类:可修改与不可修改的。
可变类型包括，字典、列表、集合和类实例等对象。
</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><pre><code>在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。

比如定义一个函数，包含上述4种参数：
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def func(a, b, c=0, *args, **kw):</div><div class="line">    <span class="built_in">print</span> <span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw</div><div class="line">``` </div><div class="line">    在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</div><div class="line">``` bash</div><div class="line">&gt;&gt;&gt; func(1, 2)</div><div class="line">a = 1 b = 2 c = 0 args = () kw = &#123;&#125;</div><div class="line">&gt;&gt;&gt; func(1, 2, c=3)</div><div class="line">a = 1 b = 2 c = 3 args = () kw = &#123;&#125;</div><div class="line">&gt;&gt;&gt; func(1, 2, 3, <span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line">a = 1 b = 2 c = 3 args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</div><div class="line">&gt;&gt;&gt; func(1, 2, 3, <span class="string">'a'</span>, <span class="string">'b'</span>, x=99)</div><div class="line">a = 1 b = 2 c = 3 args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: 99&#125;</div></pre></td></tr></table></figure>
<pre><code>还可以将args传入一个元组，kw传入一个字典
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; args = (1, 2, 3, 4)</div><div class="line">&gt;&gt;&gt; kw = &#123;<span class="string">'x'</span>: 99&#125;</div><div class="line">&gt;&gt;&gt; func(*args, **kw)</div><div class="line">a = 1 b = 2 c = 3 args = (4,) kw = &#123;<span class="string">'x'</span>: 99&#125;</div></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>只可以有一个表达式：<br>如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])</div><div class="line"><span class="comment">#还可以作为返回值</span></div><div class="line">def build(x, y):</div><div class="line">    <span class="built_in">return</span> lambda: x * x + y * y</div></pre></td></tr></table></figure>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><hr>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l=range(100)</div><div class="line">l[-10:]<span class="comment">#取倒数</span></div><div class="line">l[10:30:3]<span class="comment">#取10到30步长为3</span></div><div class="line">s=l[:]<span class="comment">#数组拷贝</span></div></pre></td></tr></table></figure>
<p>tips:不仅数组，所有实现了<strong>getitem</strong>方法的对象都可以进行切片，例如 str，tuple</p>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>for in 循环，若要实现类java式的下标循环，需使用enumerate函数对其进行转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line">         <span class="built_in">print</span> i, value</div></pre></td></tr></table></figure></p>
<p>类同切片所有实现了<strong>iter</strong>的对象都可迭代</p>
<h3 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h3><p>sorted(list,f) f为接受连个参数返回1，-1,0的方法 </p>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import functools</div><div class="line"></div><div class="line">def <span class="built_in">log</span>(func):</div><div class="line">    @functools.wraps(func)</div><div class="line">    def wrapper(*args, **kw):</div><div class="line">        <span class="built_in">print</span> <span class="string">'call %s():'</span> % func.__name__</div><div class="line">        <span class="built_in">return</span> func(*args, **kw)</div><div class="line">    <span class="built_in">return</span> wrapper</div><div class="line"><span class="comment">#或者如下</span></div><div class="line">import functools</div><div class="line"></div><div class="line">def <span class="built_in">log</span>(text):</div><div class="line">    def decorator(func):</div><div class="line">        @functools.wraps(func)</div><div class="line">        def wrapper(*args, **kw):</div><div class="line">            <span class="built_in">print</span> <span class="string">'%s %s():'</span> % (text, func.__name__)</div><div class="line">            <span class="built_in">return</span> func(*args, **kw)</div><div class="line">        <span class="built_in">return</span> wrapper</div><div class="line">    <span class="built_in">return</span> decorator</div><div class="line">```   </div><div class="line"></div><div class="line"><span class="comment">### 偏函数</span></div><div class="line">固定现有函数的一些参数，生成一个新函数,functools.partial(原函数名称, **kw):</div><div class="line"></div><div class="line">``` bash</div><div class="line">import functools</div><div class="line">int2 = functools.partial(int, base=2)</div><div class="line">max2 = functools.partial(max, 10)</div></pre></td></tr></table></figure>
<p>像max2如果不指定形参名称，或形参名称不存在，则自动将改kw追加到函数参数的第一个位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">max2(5, 6, 7)</div><div class="line"><span class="comment">#相当于</span></div><div class="line">args = (10, 5, 6, 7)</div><div class="line">max(*args)</div></pre></td></tr></table></figure></p>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><pre><code>python垃圾回收机制是引用计数。当一个对象的引用数目为0的时候，才会被从内存中回收。避免循环强引用可使用weakref
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;python数据类型没有值类型，全部为引用类型。所以变量的类型即是其指向的内存中的对象类型。对象则分为两类:可修改与不可修改
    
    </summary>
    
      <category term="python" scheme="http://gvvl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://gvvl.github.io/tags/python/"/>
    
      <category term="函数" scheme="http://gvvl.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="变量" scheme="http://gvvl.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="装饰器" scheme="http://gvvl.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="垃圾回收" scheme="http://gvvl.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="偏函数" scheme="http://gvvl.github.io/tags/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>钢铁是怎么炼成的</title>
    <link href="http://gvvl.github.io/2016/06/07/%E5%9C%B0%E9%93%81%E6%98%AF%E6%80%8E%E4%B9%88%E7%82%BC%E6%88%90%E7%9A%84/"/>
    <id>http://gvvl.github.io/2016/06/07/地铁是怎么炼成的/</id>
    <published>2016-06-07T00:28:55.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="android" scheme="http://gvvl.github.io/categories/android/"/>
    
    
      <category term="Test" scheme="http://gvvl.github.io/tags/Test/"/>
    
      <category term="Me" scheme="http://gvvl.github.io/tags/Me/"/>
    
  </entry>
  
  <entry>
    <title>钢铁是怎么炼成的</title>
    <link href="http://gvvl.github.io/2016/06/07/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E4%B9%88%E7%82%BC%E6%88%90%E7%9A%84/"/>
    <id>http://gvvl.github.io/2016/06/07/钢铁是怎么炼成的/</id>
    <published>2016-06-07T00:28:55.000Z</published>
    <updated>2017-03-23T03:54:21.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
